1. configmap and secret
mkdir secret
cd secret
openssl genrsa -out https.key 2048
openssl req -new -x509 -key https.key -out https.crt -days 365 -subj /CN=www.example.com
echo "hello" > data.file
cat data.file

kubectl create secret generic fortune-https --from-file=secret
kubectl get secret

kubectl describe secret fortune-https
kubectl get secret fortune-https -o yaml
kubectl edit cm fortune-config
server {
    listen              80;
    listen              443 ssl;
    server_name         www.example.com;
    ssl_certificate     certs/https.cert;
    ssl_certificate_key certs/https.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

}

vi fortune-volume-cm-secret.yaml
# curl -k https://10.42.0.18:443
# curl -k https://10.42.0.18:443 -v


2. Deploy
kubectl create -f deployment.yaml  --record
kubectl patch deployment app -p '{"spec": {"minReadySeconds": 10}}'

kubectl set image deployment app-deploy app-container=smlinux/app:v2 --record

kubectl rollout history deployment app-deploy
kubectl rollout status deployment app-deploy

kubectl rollout undo deployment app-deploy --to-revision=1
kubectl get deployment app-deploy -o yaml | grep -i history



- dashboard
kubectl apply -f \
   https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml

http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/

cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
EOF


cat <<EOF | kubectl create -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
EOF

kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user| awk '{print $1}')
---------------------
API 인증

kubectl create ns foo
kubectl create ns bar
kubectl get namespaces

kubectl run test --image=smlinux/kubectl-proxy -n foo

kubectl get deployment -n foo
kubectl get pod -n foo

kubectl exec -it test-7fcbd9fbbc-l49vk –n foo -- sh
/# curl localhost:8001/api/v1/namespaces/foo/services

    role
[service - get, list] ======>
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: foo 
  name: service-reader
rules:
- apiGroups: [""]           
  verbs: ["get", "list"]       
  resources: ["services"]

 kubectl create rolebinding test --role=service-reader --serviceaccount=foo:default -n foo
 kubectl get rolebindings test -n foo -o yaml
 
 # curl localhost:8001/api/v1/namespaces/foo/services
 
 # kubectl edit rolebindings test -n foo
 ...
 roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: service-reader
subjects:
- kind: ServiceAccount
  name: default
  namespace: foo
- kind: ServiceAccount
  name: default
  namespace: bar


T3/ # curl localhost:8001/api/v1/namespaces/bar/services    ??




 
